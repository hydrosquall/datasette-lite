---
import Layout from "../layouts/Layout.astro";
import Spinner from '../components/Spinner.astro';
---
<Layout title="Datasette">
  <div id="loading-indicator">
		<Spinner />
    <textarea id="loading-logs">Loading...</textarea>
  </div>

  <div id="output"></div>

  <form id="load-custom">
    <p style="padding: 1em">
      <button type="button" class="db-url">Load SQLite DB by URL</button>
      <button type="button" class="csv-url">Load CSV by URL</button>
      <button type="button" class="sql-url">Load SQL by URL</button>
      <a
        style="text-decoration: none; padding-left: 0.3em; color: #067EFF"
        href="https://github.com/simonw/datasette-lite">Documentation</a
      >
    </p>
  </form>

  <script>
    const datasetteWorker = new Worker("webworker.js");
    const urlParams = new URLSearchParams(location.search);
    const initialUrl = urlParams.get("url");
    const csvUrls = urlParams.getAll("csv");
    const sqlUrls = urlParams.getAll("sql");
    const installUrls = urlParams.getAll("install");

    datasetteWorker.postMessage({
      type: "startup",
      initialUrl,
      csvUrls,
      sqlUrls,
      installUrls,
    });

    let loadingLogs = ["Loading..."];

    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    datasetteWorker.onmessage = (event) => {
      var ta = document.getElementById("loading-logs");
      if (event.data.type == "log") {
        loadingLogs.push(event.data.line);
        ta.value = loadingLogs.join("\n");
        ta.scrollTop = ta.scrollHeight;
        return;
      }
      let html = "";
      if (event.data.error) {
        html = `<div style="padding: 0.5em"><h3>Error</h3><pre>${escapeHtml(
          event.data.error
        )}</pre></div>`;
      } else if (/^text\/html/.exec(event.data.contentType)) {
        html = event.data.text;
      } else if (/^application\/json/.exec(event.data.contentType)) {
        html = `<pre style="padding: 0.5em">${escapeHtml(
          JSON.stringify(JSON.parse(event.data.text), null, 4)
        )}</pre>`;
      } else {
        html = `<pre style="padding: 0.5em">${escapeHtml(
          event.data.text
        )}</pre>`;
      }
      document.getElementById("output").innerHTML = html;
      let title = document.getElementById("output").querySelector("title");
      if (title) {
        document.title = title.innerText;
      }
      window.scrollTo({ top: 0, left: 0 });
      document.getElementById("loading-indicator").style.display = "none";
    };

    // Window...
    window.onpopstate = function (event) {
      console.log(event);
      datasetteWorker.postMessage({
        path: event.target.location.hash.split("#")[1] || "",
      });
    };

    // Start with path from location.hash, if available
    if (location.hash) {
      datasetteWorker.postMessage({ path: location.hash.replace(/^\#/, "") });
    } else {
      datasetteWorker.postMessage({ path: "/" });
    }

    function isExternal(url) {
      let startsWithProtocol = !!/^http:\/\/|https:\/\//.exec(url);
      if (!startsWithProtocol) {
        return false;
      }
      // Is it localhost?
      return new URL(url).host != "localhost";
    }

    function isFragmentLink(url) {
      // Is this a #fragment on the current page?
      let u = new URL(url);
      return (
        location.pathname == u.pathname &&
        location.hostname == u.hostname &&
        u.hash &&
        u.hash != location.hash
      );
    }

    function loadPath(path) {
      path = path.split("#")[0].replace("http://localhost", "");
      console.log({ path });
      history.pushState({ path: path }, path, "#" + path);
      datasetteWorker.postMessage({ path });
    }

    let output = document.getElementById("output");
    output.addEventListener(
      "click",
      (ev) => {
        var link = ev.srcElement.closest("a");
        if (link && link.href) {
          ev.stopPropagation();
          ev.preventDefault();
          if (isFragmentLink(link.href)) {
            // Jump them to that element, but don't update the URL bar
            // since we use # in the URL to mean something else
            let fragment = new URL(link.href).hash.replace("#", "");
            if (fragment) {
              let el = document.getElementById(fragment);
              el.scrollIntoView();
            }
            return;
          }
          let href = link.getAttribute("href");
          if (isExternal(href)) {
            window.open(href);
            return;
          }
          loadPath(href);
        }
      },
      true
    );

    output.addEventListener(
      "submit",
      (ev) => {
        console.log(ev);
        ev.stopPropagation();
        ev.preventDefault();
        if (
          ev.target &&
          ev.target.nodeName == "FORM" &&
          ev.target.method.toLowerCase() == "get"
        ) {
          let qs = new URLSearchParams(new FormData(ev.target)).toString();
          let action = ev.target.getAttribute("action");
          loadPath(`${action}?${qs}`);
        }
      },
      true
    );

    async function checkUrl(url, contentType) {
      try {
        response = await fetch(url, { method: "HEAD" });
        if (response.status != 200) {
          return false;
        }
        if (
          contentType &&
          response.headers.get("content-type") != contentType
        ) {
          return false;
        }
        return true;
      } catch (error) {
        console.error(error);
        return false;
      }
    }

    document
      .querySelector("#load-custom button.db-url")
      .addEventListener("click", async function (ev) {
        ev.preventDefault();
        let url = prompt("Enter a full URL to a SQLite .db file");
        if (!url) {
          return;
        }
        let valid = await checkUrl(url, "application/octet-stream");
        if (valid) {
          location.href = location.pathname + "?url=" + encodeURIComponent(url);
        } else {
          alert("That database URL could not be loaded");
        }
      });
    document
      .querySelector("#load-custom button.csv-url")
      .addEventListener("click", async function (ev) {
        ev.preventDefault();
        let url = prompt("Enter a full URL to a CSV file");
        if (!url) {
          return;
        }
        let valid = await checkUrl(url);
        if (valid) {
          location.href = location.pathname + "?csv=" + encodeURIComponent(url);
        } else {
          alert("That CSV could not be loaded");
        }
      });
    document
      .querySelector("#load-custom button.sql-url")
      .addEventListener("click", async function (ev) {
        ev.preventDefault();
        let url = prompt("Enter a full URL to a SQL file");
        if (!url) {
          return;
        }
        let valid = await checkUrl(url);
        if (valid) {
          location.href = location.pathname + "?sql=" + encodeURIComponent(url);
        } else {
          alert("That SQL could not be loaded");
        }
      });
  </script>
</Layout>

<style>
  textarea#sql-editor {
    padding: 0.5em;
    font-size: 1em;
    line-height: 1.4;
  }
</style>
