  <form id="load-custom">
    <p style="padding: 1em">
      <button type="button" class="db-url">Load SQLite DB by URL</button>
      <button type="button" class="csv-url">Load CSV by URL</button>
      <button type="button" class="sql-url">Load SQL by URL</button>
      <a
        style="text-decoration: none; padding-left: 0.3em; color: #067EFF"
        href="https://github.com/simonw/datasette-lite">Documentation</a
      >
    </p>
  </form>

<script>
  async function checkUrl(url, contentType) {
    try {
      response = await fetch(url, { method: "HEAD" });
      if (response.status != 200) {
        return false;
      }
      if (contentType && response.headers.get("content-type") != contentType) {
        return false;
      }
      return true;
    } catch (error) {
      console.error(error);
      return false;
    }
  }

  document
    .querySelector("#load-custom button.db-url")
    .addEventListener("click", async function (ev) {
      ev.preventDefault();
      let url = prompt("Enter a full URL to a SQLite .db file");
      if (!url) {
        return;
      }
      let valid = await checkUrl(url, "application/octet-stream");
      if (valid) {
        location.href = location.pathname + "?url=" + encodeURIComponent(url);
      } else {
        alert("That database URL could not be loaded");
      }
    });
  document
    .querySelector("#load-custom button.csv-url")
    .addEventListener("click", async function (ev) {
      ev.preventDefault();
      let url = prompt("Enter a full URL to a CSV file");
      if (!url) {
        return;
      }
      let valid = await checkUrl(url);
      if (valid) {
        location.href = location.pathname + "?csv=" + encodeURIComponent(url);
      } else {
        alert("That CSV could not be loaded");
      }
    });
  document
    .querySelector("#load-custom button.sql-url")
    .addEventListener("click", async function (ev) {
      ev.preventDefault();
      let url = prompt("Enter a full URL to a SQL file");
      if (!url) {
        return;
      }
      let valid = await checkUrl(url);
      if (valid) {
        location.href = location.pathname + "?sql=" + encodeURIComponent(url);
      } else {
        alert("That SQL could not be loaded");
      }
    });
</script>
