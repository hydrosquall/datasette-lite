  <form id="load-custom">
    <p style="padding: 1em">
      <button type="button" class="db-url">Load SQLite DB by URL</button>
      <button type="button" class="csv-url">Load CSV</button>
      <button type="button" class="json-url">Load JSON</button>
      <button type="button" class="sql-url">Load SQL</button>
      <a
        style="text-decoration: none; padding-left: 0.3em; color: #067EFF"
        href="https://github.com/simonw/datasette-lite">Documentation</a
      >
    </p>
  </form>

<script>
  import {
    rewriteGithubUrlWithCorsHeaders
  } from "../init-app.utils";

  /** contentTypes: optional array of string content types. Can also be falsy. */
  async function checkUrl(url, contentTypes) {
    try {
      let response = await fetch(url, { method: "HEAD" });
      if (response.status != 200) {
        return false;
      }
      if (contentTypes && (!contentTypes.includes(response.headers.get('content-type')))) {
        return false;
      }
      return true;
    } catch (error) {
      console.error(error);
      return false;
    }
  }

  document
    .querySelector("#load-custom button.db-url")
    .addEventListener("click", async function (ev) {
      ev.preventDefault();
      let url = rewriteGithubUrlWithCorsHeaders(prompt("Enter a full URL to a SQLite .db file"));
      if (!url) {
        return;
      }
      let valid = await checkUrl(url, ["application/octet-stream", "application/x-sqlite3", "application/vnd.sqlite3"]);
      if (valid) {
        location.href = location.pathname + "?url=" + encodeURIComponent(url);
      } else {
        alert("That database URL could not be loaded");
      }
    });
  document
    .querySelector("#load-custom button.csv-url")
    .addEventListener("click", async function (ev) {
      ev.preventDefault();
      let url = rewriteGithubUrlWithCorsHeaders(prompt("Enter a full URL to a CSV file"));
      if (!url) {
        return;
      }
      let valid = await checkUrl(url, false);
      if (valid) {
        location.href = location.pathname + "?csv=" + encodeURIComponent(url);
      } else {
        alert("That CSV could not be loaded");
      }
    });

  document.querySelector('#load-custom button.json-url').addEventListener('click', async function(ev) {
    ev.preventDefault();
    let url = rewriteGithubUrlWithCorsHeaders(prompt("Enter a full URL to a JSON file"));
    if (!url) {
      return;
    }
    let valid = await checkUrl(url, false);
    if (valid) {
      location.href = location.pathname + '?json=' + encodeURIComponent(url);
    } else {
      alert("That JSON could not be loaded");
    }
  });

  document
    .querySelector("#load-custom button.sql-url")
    .addEventListener("click", async function (ev) {
      ev.preventDefault();
      let url = prompt("Enter a full URL to a SQL file");
      if (!url) {
        return;
      }
      let valid = await checkUrl(url, false);
      if (valid) {
        location.href = location.pathname + "?sql=" + encodeURIComponent(url);
      } else {
        alert("That SQL could not be loaded");
      }
    });


</script>

<style>
  form input[type=submit], form button[type=button] {
    font-weight: 400;
    cursor: pointer;
    text-align: center;
    vertical-align: middle;
    border-width: 1px;
    border-style: solid;
    padding: .5em 0.8em;
    font-size: 0.9rem;
    line-height: 1;
    border-radius: .25rem;
}

form input[type=submit] {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
    -webkit-appearance: button;
}

form button[type=button] {
    color: #007bff;
    background-color: #fff;
    border-color: #007bff;
}

</style>
